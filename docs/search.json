[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "One of my main goals for this blog is to provide a platform for knowledge sharing using tools such as R, Python, SQL, etc. I believe that these tools can help us better understand and optimize supply chain processes, ultimately leading to increase efficiency and cost savings.\nI will explore various topics related to SCM, such as inventory optimization, logistics management and demand forecasting. I will also share my experiences with using different data analysis techniques, including data visualization and machine learning.\nWhile i am still learning, i hope that my blog can serve as a resource for others who are interested in exploring this fascinating field."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "Since this post doesnâ€™t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Supply Chain Management Analysis",
    "section": "",
    "text": "ABC-XYZ Inventory Classification\n\n\n\n\n\n\n\ncode\n\n\ninventory analysis\n\n\npython\n\n\n\n\n\n\n\n\n\n\n\nApr 10, 2023\n\n\nAyomide Akinwande\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/abc-xyz-analysis/index.html",
    "href": "posts/abc-xyz-analysis/index.html",
    "title": "ABC-XYZ Inventory Classification",
    "section": "",
    "text": "Effective inventory management is essential in maintaining optimal levels of inventory which ensures that the right items are always available when needed while reducing the cost of holding inventory and ultimately avoiding stockouts or excess inventory.\nInventory classification using the ABC-XYZ analysis is a widely used technique which categorizes items based on their sales volume and demand variability, allowing businesses to have better control over thier inventories and to also use optimal strategies on items that are most important to their business. We will utilize the powerful framework of ABC-XYZ inventory classification model to analyze transaction data for products. By performing this analysis, we will be able to extract valuable insights and identify trends that can help inform strategic decisions around inventory management."
  },
  {
    "objectID": "posts/abc-xyz-analysis/index.html#abc-classification",
    "href": "posts/abc-xyz-analysis/index.html#abc-classification",
    "title": "ABC-XYZ Inventory Classification",
    "section": "ABC Classification",
    "text": "ABC Classification\n\ndiscuss\n\n\nprint(f\"Number of unique products (SKU) is {df_m['sku'].nunique()}\")\n\nNumber of unique products (SKU) is 5241\n\n\n\nabc_df = (\n    df_m\n        .groupby(\"sku\")\n        .agg(unique_purchases = (\"sku\", \"nunique\"),\n             total_demand = (\"quantity\", \"sum\"), \n             total_revenue = (\"sales_amount\", \"sum\"))\n        .sort_values(by=\"total_revenue\", ascending=False)\n        .reset_index()\n)\n\nabc_df.head()\n\n\n\n\n\n  \n    \n      \n      sku\n      unique_purchases\n      total_demand\n      total_revenue\n    \n  \n  \n    \n      0\n      3YDVF\n      1\n      926.0\n      29419.35\n    \n    \n      1\n      LJ26I\n      1\n      632.0\n      13571.45\n    \n    \n      2\n      IRQZ4\n      1\n      321.0\n      11681.63\n    \n    \n      3\n      DWJC4\n      1\n      823.0\n      10592.09\n    \n    \n      4\n      44RUE\n      1\n      218.0\n      8942.63\n    \n  \n\n\n\n\n\ndef abc_classify_product(cum_percent):\n    \"\"\"\n    Apply an ABC classification to each product based on \n    its ranked percentage revenue contribution. Any split \n    can be used to suit your data. \n\n    :param cum_percent: Running percentage of revenue contributed\n    :return: ABC inventory classification\n    \"\"\"\n\n    if cum_percent <= 80:\n        return 'A'\n    elif cum_percent > 80 and cum_percent <= 90:\n        return 'B'\n    else:\n        return 'C'\n\n\nabc_df = abc_df.assign(\n    # the cummlative sum of revenue genrated by each unique SKU.\n    revenue_cumsum = lambda d: d[\"total_revenue\"].cumsum(),\n    # percentage of revenue cummulative sum.\n    revenue_running_percent = lambda d: (d[\"revenue_cumsum\"] / d[\"total_revenue\"].sum()) * 100,\n    # assigning product class based on the pareto ...\n    abc_class = lambda d: d[\"revenue_running_percent\"].apply(abc_classify_product),\n    # simple rank of each revenue percentage.\n    abc_rank  = lambda d: d[\"revenue_running_percent\"].rank().astype(int)\n)\n\nabc_df.head()\n\n\n\n\n\n  \n    \n      \n      sku\n      unique_purchases\n      total_demand\n      total_revenue\n      revenue_cumsum\n      revenue_running_percent\n      abc_class\n      abc_rank\n    \n  \n  \n    \n      0\n      3YDVF\n      1\n      926.0\n      29419.35\n      29419.35\n      1.866325\n      A\n      1\n    \n    \n      1\n      LJ26I\n      1\n      632.0\n      13571.45\n      42990.80\n      2.727279\n      A\n      2\n    \n    \n      2\n      IRQZ4\n      1\n      321.0\n      11681.63\n      54672.43\n      3.468347\n      A\n      3\n    \n    \n      3\n      DWJC4\n      1\n      823.0\n      10592.09\n      65264.52\n      4.140295\n      A\n      4\n    \n    \n      4\n      44RUE\n      1\n      218.0\n      8942.63\n      74207.15\n      4.707603\n      A\n      5\n    \n  \n\n\n\n\n\ntemp = (\n    abc_df\n        .groupby(\"abc_class\")\n        .agg(total_products = ('sku', 'nunique'),\n             total_demand = ('total_demand', \"sum\"),\n             total_revenue = ('total_revenue', \"sum\"))\n        .reset_index()\n)\n\n\nNumber of Products\n\n(\n    g.ggplot(data=temp, mapping=g.aes(x=\"abc_class\", y=\"total_products\")) +\n    g.geom_col() +\n    g.labs(x=\"Class\", y=\"No. Products\", title=\"Number of Products in Each Class\") +\n    g.theme(figure_size=(10, 4))\n)\n\n\n\n\n<ggplot: (126679290061)>\n\n\n\n\nProduct Demand\n\n(\n    g.ggplot(data=temp, mapping=g.aes(x=\"abc_class\", y=\"total_demand\")) +\n    g.geom_col() +\n    g.labs(x=\"Class\", y=\"Qty. Demand\", title=\"Total Quantity Demand by (ABC) Class\") +\n    g.theme(figure_size=(10, 4))\n)\n\n\n\n\n<ggplot: (126567596005)>\n\n\n\n\nRevenue\n\n(\n    g.ggplot(data=temp, mapping=g.aes(x=\"abc_class\", y=\"total_revenue\")) +\n    g.geom_col() +\n    g.labs(x=\"Class\", y=\"Revenue\", title=\"Total Revenu by (ABC) Class\") +\n    g.theme(figure_size=(10, 4))\n)\n\n\n\n\n<ggplot: (126567633641)>"
  },
  {
    "objectID": "posts/abc-xyz-analysis/index.html#xyz-classification",
    "href": "posts/abc-xyz-analysis/index.html#xyz-classification",
    "title": "ABC-XYZ Inventory Classification",
    "section": "XYZ Classification",
    "text": "XYZ Classification\nOne major aspect ABC analysis considers is the importance of items based on their demand and revenue leaving out other factors such as demand variability and sessionality. This gap can be solved using the XYZ inventory classification which categorize products according to their level of demand variability.\nThere are three categories in XYZ analysis which are:\n\nClass X: These are items with low demand variability, they are less challenging to manage because of their predictable demand patterns.\n\n\nClass Y: Items in this class have a moderate demand variability they are less easer to manage than items in class X but have better predictable patterns than items in class z.\n\n\nClass Z: There is a high demand variability in items that falls within this category, demand for product are less stable and predictable.\n\n\n(\n    g.ggplot(data=df_m.groupby(\"month\")[\"quantity\"].sum().reset_index(), \n             mapping=g.aes(x=\"factor(month)\", y=\"quantity\", group=1)) +\n    g.geom_line() +\n    g.scale_y_continuous(labels = lambda l: [\"{:,.0f}\".format(v) for v in l]) +\n    g.labs(x=\"Month\", y=\"Quantity\", title=\"Quantity Demand by Month\") +\n    g.theme(figure_size=(10, 4)) \n)\n\n\n\n\n<ggplot: (193133998062)>\n\n\nA rundown of the seasonality in the data shows that the total customer order by month have huge variablility across the year with its lowest point in August while its peaked in December. It is important to also note that order started to increase from Match to May after that a sudden drop in order from June to August began.\n\n(\n    g.ggplot(data=df_m.groupby(\"month\")[\"sales_amount\"].sum().reset_index(), \n             mapping=g.aes(x=\"factor(month)\", y=\"sales_amount\", group=1)) +\n    g.geom_line() +\n    g.scale_y_continuous(labels = lambda l: [\"{:,.0f}\".format(v) for v in l]) +\n    g.labs(x=\"Month\", y=\"Revenue\", title=\"Total Revenue in Each Month\") +\n    g.theme_minimal() +\n    g.theme(figure_size=(10, 4)) \n)\n\n\n\n\n<ggplot: (193134591637)>\n\n\nAlthough there are similar seasonal pattern between the total quantity order and revenue, the upword trend in revenue appear to have began in January all the way through to May, before the expected drop in revenue similar to the quantity order.\nTo draw out the XYZ class, we must first reshape the data where each row represent a single SKU and the 12 months spread across different columns with values of the total quantity demand for a product.\n\nxyz_df = (\n    df_m\n        .groupby([\"sku\", \"month\"])[\"quantity\"]\n        .sum()\n        .reset_index()\n        .pivot(index=\"sku\", columns=\"month\", values=\"quantity\")\n        .fillna(0)\n        .add_prefix(\"M\")\n        .reset_index()\n        .rename(index={\"month\": \"index\"})\n)\n\nxyz_df.columns.name = \"\"\n\nxyz_df.head()\n\n\n\n\n\n  \n    \n      \n      sku\n      M1\n      M2\n      M3\n      M4\n      M5\n      M6\n      M7\n      M8\n      M9\n      M10\n      M11\n      M12\n    \n  \n  \n    \n      0\n      00GVC\n      1.0\n      0.0\n      0.0\n      0.0\n      0.0\n      1.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n    \n    \n      1\n      00OK1\n      0.0\n      0.0\n      1.0\n      7.0\n      2.0\n      1.0\n      2.0\n      3.0\n      0.0\n      0.0\n      0.0\n      2.0\n    \n    \n      2\n      0121I\n      1.0\n      3.0\n      4.0\n      2.0\n      1.0\n      5.0\n      3.0\n      1.0\n      2.0\n      4.0\n      3.0\n      2.0\n    \n    \n      3\n      01IEO\n      3.0\n      3.0\n      5.0\n      8.0\n      6.0\n      3.0\n      3.0\n      3.0\n      0.0\n      3.0\n      2.0\n      4.0\n    \n    \n      4\n      01IQT\n      0.0\n      2.0\n      0.0\n      0.0\n      0.0\n      1.0\n      1.0\n      2.0\n      0.0\n      0.0\n      0.0\n      1.0\n    \n  \n\n\n\n\n\nxyz_df = xyz_df.assign(\n    # calculate the standard deviation of all months total demand.\n    std_demand   = lambda d: d[[c for c in xyz_df.columns if \"M\" in c]].std(axis=1),\n    # calculate the total demand across all months.\n    total_demand = lambda d: d[[c for c in xyz_df.columns if \"M\" in c]].sum(axis=1),\n    # calculate the average demand for each SKU.\n    avg_demand   = lambda d: d[\"total_demand\"] / 12,\n    # coefficient of variation for each SKU\n    cov_demand   = lambda d: d[\"std_demand\"] / d[\"avg_demand\"]\n)\n\nxyz_df.head()\n\n\n\n\n\n  \n    \n      \n      sku\n      M1\n      M2\n      M3\n      M4\n      M5\n      M6\n      M7\n      M8\n      M9\n      M10\n      M11\n      M12\n      std_demand\n      total_demand\n      avg_demand\n      cov_demand\n    \n  \n  \n    \n      0\n      00GVC\n      1.0\n      0.0\n      0.0\n      0.0\n      0.0\n      1.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.389249\n      2.0\n      0.166667\n      2.335497\n    \n    \n      1\n      00OK1\n      0.0\n      0.0\n      1.0\n      7.0\n      2.0\n      1.0\n      2.0\n      3.0\n      0.0\n      0.0\n      0.0\n      2.0\n      2.022600\n      18.0\n      1.500000\n      1.348400\n    \n    \n      2\n      0121I\n      1.0\n      3.0\n      4.0\n      2.0\n      1.0\n      5.0\n      3.0\n      1.0\n      2.0\n      4.0\n      3.0\n      2.0\n      1.311372\n      31.0\n      2.583333\n      0.507628\n    \n    \n      3\n      01IEO\n      3.0\n      3.0\n      5.0\n      8.0\n      6.0\n      3.0\n      3.0\n      3.0\n      0.0\n      3.0\n      2.0\n      4.0\n      2.020726\n      43.0\n      3.583333\n      0.563924\n    \n    \n      4\n      01IQT\n      0.0\n      2.0\n      0.0\n      0.0\n      0.0\n      1.0\n      1.0\n      2.0\n      0.0\n      0.0\n      0.0\n      1.0\n      0.792961\n      7.0\n      0.583333\n      1.359363\n    \n  \n\n\n\n\nCoefficient of variation or CV is a statistical measure that express the variability of a set of data as a percentage of its mean.\n\nFormula: CV = (standard deviation / mean)\n\nTo measure each SKU variability, its CV will be used to determine the level of variation. when the value closer to zero, it indicate a small amount of variability, while value further from zero indecate a high amount of variability.\n\n(\n    xyz_df[\"cov_demand\"]\n        .agg([\"min\", \"mean\", \"max\"])\n        .reset_index()\n        .rename(columns={\"index\": \"Stats\", \"cov_demand\": \"Coefficient of Variation\"})\n)\n\n\n\n\n\n  \n    \n      \n      Stats\n      Coefficient of Variation\n    \n  \n  \n    \n      0\n      min\n      0.095766\n    \n    \n      1\n      mean\n      1.748931\n    \n    \n      2\n      max\n      3.464102\n    \n  \n\n\n\n\nThe average CV of 1.75 indicate that the level of variability can be considered high since it falls within the CV range of 1-2, also the Maximum CV of 3.46 indicate that there are lot of products with high demand variability.\n\n(\n    g.ggplot(data=xyz_df, mapping=g.aes(x=\"cov_demand\")) +\n    g.geom_histogram(color=\"#FFF\", bins = 20) +\n    g.ggtitle(\"Coefficient of Variation\") +\n    g.theme(figure_size=(10, 4))\n)\n\n\n\n\n<ggplot: (193134606240)>\n\n\n\nXYZ classes\nWe will use the 0.5/1/> 1 CV to group all product into XYZ classes. products with a CV less tha 0.5 indicate low demand variability and better forecating, this category of products will be assgined the X class while product with CV of 0.5 to 1 indicate a moderate demand variability and will make up the Y class. Products with CV greater than 1 are much harder to predict and are subject to high fluctuations throughout the year and they will be categorised as Z class.\n\ndef xyz_classifer(cov): # change name\n    \"\"\"\n    Assign (XYZ) categories to each SKU based on their coefficient of \n    variation (CV) in order quantity.\n\n    :param cov: Coefficient of variation in order quantity for SKU\n    :return:  A pandas Series with three unique category.\n    \"\"\"\n\n    if cov <= 0.5:\n        return 'X'\n    elif cov > 0.5 and cov <= 1.0:\n        return 'Y'\n    else:\n        return 'Z'\n\n\nxyz_df = xyz_df.assign(xyz_class = xyz_df[\"cov_demand\"].apply(xyz_classifer))\n\n(\n    xyz_df[\"xyz_class\"]\n        .value_counts()\n        .reset_index()\n        .rename(columns={\"index\": \"Class\", \"xyz_class\": \"count\"})\n)\n\n\n\n\n\n  \n    \n      \n      Class\n      count\n    \n  \n  \n    \n      0\n      Z\n      3429\n    \n    \n      1\n      Y\n      1281\n    \n    \n      2\n      X\n      531\n    \n  \n\n\n\n\nBased on the number of product in each class, there are more products in the Z class than other classes this is expected given the distribution analysis earlier.\n\n# Tabular Summary\n(\n    xyz_df\n        .groupby(\"xyz_class\")\n        .agg(total_product = (\"sku\", \"nunique\"),\n             total_demand = (\"total_demand\", \"sum\"),\n             std_of_demand = (\"std_demand\", \"mean\"),\n             average_demand = (\"avg_demand\", \"mean\"),\n             average_cov = (\"cov_demand\", \"mean\"))\n        .reset_index()\n)\n\n\n\n\n\n  \n    \n      \n      xyz_class\n      total_product\n      total_demand\n      std_of_demand\n      average_demand\n      average_cov\n    \n  \n  \n    \n      0\n      X\n      531\n      99436.733\n      4.981240\n      15.605263\n      0.369697\n    \n    \n      1\n      Y\n      1281\n      65623.300\n      3.037538\n      4.269015\n      0.736462\n    \n    \n      2\n      Z\n      3429\n      30348.396\n      1.210885\n      0.737542\n      2.340750\n    \n  \n\n\n\n\n\nmonth_cols = [c for c in xyz_df.columns if \"M\" in c]\n\ntemp = (\n    xyz_df\n        .groupby(\"xyz_class\")[month_cols]\n        .sum()\n        .unstack(level=\"xyz_class\")\n        .reset_index()\n        .rename(columns={0: \"total_demand\", \"\": \"month\"})\n        .assign(month=lambda d: d[\"month\"].astype(\"category\").cat.reorder_categories(month_cols, ordered=True))\n)\n\ntemp.head()\n\n\n\n\n\n  \n    \n      \n      month\n      xyz_class\n      total_demand\n    \n  \n  \n    \n      0\n      M1\n      X\n      7955.50\n    \n    \n      1\n      M1\n      Y\n      4737.00\n    \n    \n      2\n      M1\n      Z\n      2181.87\n    \n    \n      3\n      M2\n      X\n      7851.49\n    \n    \n      4\n      M2\n      Y\n      4794.34\n    \n  \n\n\n\n\n\n(\n    g.ggplot(data=temp, mapping=g.aes(x=\"month\", y=\"total_demand\", group=1)) +\n    g.geom_line() +\n    g.scale_y_continuous(labels= lambda l: [\"{:,.0f}\".format(v) for v in l]) +\n    g.facet_wrap(facets=\"xyz_class\", nrow=3, scales=\"free_y\") +\n    g.labs(x=None, y=\"Demand\", title=\"(XYZ) Class by Total Quantity Order in each Month\") +\n    custom_theme(figure_size=(10, 6))\n)\n\n\n\n\n<ggplot: (193134620162)>\n\n\nExamining each category represented on the graph, class X have the least amount of flutuations compared to class Y and class Z, class Z represent a clear case of high volatility on quantity demand across all months."
  },
  {
    "objectID": "posts/abc-xyz-analysis/index.html#abc-xyz-inventory-analysis",
    "href": "posts/abc-xyz-analysis/index.html#abc-xyz-inventory-analysis",
    "title": "ABC-XYZ Inventory Classification",
    "section": "ABC-XYZ inventory analysis",
    "text": "ABC-XYZ inventory analysis\nCombining both ABC and XYZ classes provides inventory managers with a clear insight on the most important items in the inventory, based on the amount of revenue they contribute and also their demand patterns. This information can help them determine the appropriate stock levels which reduces the risk of either stockouts or overstocking.\n\nMerge ABC and XYZ class tables\n\nabc_xyz = abc_df[[\"sku\", \"total_revenue\", \"abc_class\"]].merge(\n    xyz_df[[\"sku\", \"std_demand\", \"total_demand\", \"avg_demand\", \"cov_demand\", \"xyz_class\"]],\n    on=\"sku\",\n    how=\"left\"\n)\n\nabc_xyz.head()\n\n\n\n\n\n\n\n\nsku\ntotal_revenue\nabc_class\nstd_demand\ntotal_demand\navg_demand\ncov_demand\nxyz_class\n\n\n\n\n0\n3YDVF\n29419.35\nA\n7.529739\n926.0\n77.166667\n0.097578\nX\n\n\n1\nLJ26I\n13571.45\nA\n13.773052\n632.0\n52.666667\n0.261514\nX\n\n\n2\nIRQZ4\n11681.63\nA\n10.703653\n321.0\n26.750000\n0.400137\nX\n\n\n3\nDWJC4\n10592.09\nA\n8.273268\n823.0\n68.583333\n0.120631\nX\n\n\n4\n44RUE\n8942.63\nA\n15.602059\n218.0\n18.166667\n0.858829\nY\n\n\n\n\n\n\n\n\n\nCombining ABC & XYZ classes\n\nabc_xyz = abc_xyz.assign(abc_xyz_class = abc_xyz[\"abc_class\"].astype(str) + abc_xyz[\"xyz_class\"].astype(str))\n\nabc_xyz.head()\n\n\n\n\n\n\n\n\nsku\ntotal_revenue\nabc_class\nstd_demand\ntotal_demand\navg_demand\ncov_demand\nxyz_class\nabc_xyz_class\n\n\n\n\n0\n3YDVF\n29419.35\nA\n7.529739\n926.0\n77.166667\n0.097578\nX\nAX\n\n\n1\nLJ26I\n13571.45\nA\n13.773052\n632.0\n52.666667\n0.261514\nX\nAX\n\n\n2\nIRQZ4\n11681.63\nA\n10.703653\n321.0\n26.750000\n0.400137\nX\nAX\n\n\n3\nDWJC4\n10592.09\nA\n8.273268\n823.0\n68.583333\n0.120631\nX\nAX\n\n\n4\n44RUE\n8942.63\nA\n15.602059\n218.0\n18.166667\n0.858829\nY\nAY\n\n\n\n\n\n\n\nThis combination create 9 unique classes which are AX, AY, AZ, BX, BY, BZ, CX, CY, and CZ and each SKU falls under one of them. Each combined class can be summarised as follow:\nAX : This category consist of high revenue generating items with a stable demand which makes them easy to forecast.\nAY : Also a high revenue generating items but with less stable demand, as demand varies over time.\nAZ : They are tough to forecaset because of their irregular demand nature, but they are also a high revenue generating item.\nBX : They generate moderate revenue and have a stable demand across all month.\nBY : Items in this category are less stable based on demand but they generate a moderate amount of revenue.\nBZ : Revenue generated from items in this category are moderate but forecasting demand for them can be very challenging.\nCX : Items in this category are easy to forecast but they generate a very low amount of revenue.\nCY : This category includes items with less stable demand and also low revenue.\nCZ : The items here are difficult to forecast because demand may be periodic and they also generate a very small amount of revenue.\n\ntemp = (\n    abc_xyz\n        .groupby(\"abc_xyz_class\")\n        .agg(total_sku=('sku', 'nunique'),\n             total_demand = ('total_demand', \"sum\"),\n             avg_demand = ('avg_demand', 'mean'),    \n             total_revenue = ('total_revenue', \"sum\"))\n        .reset_index()\n)\n\ntemp\n\n\n\n\n\n\n\n\nabc_xyz_class\ntotal_sku\ntotal_demand\navg_demand\ntotal_revenue\n\n\n\n\n0\nAX\n412\n86198.533\n17.434978\n622917.97\n\n\n1\nAY\n519\n38869.630\n6.241110\n512348.97\n\n\n2\nAZ\n204\n5086.510\n2.077823\n125490.43\n\n\n3\nBX\n104\n12588.200\n10.086699\n21662.63\n\n\n4\nBY\n575\n22001.670\n3.188648\n103916.87\n\n\n5\nBZ\n731\n11243.900\n1.281794\n111158.97\n\n\n6\nCX\n15\n650.000\n3.611111\n896.88\n\n\n7\nCY\n187\n4752.000\n2.117647\n9454.98\n\n\n8\nCZ\n2494\n14017.986\n0.468390\n68477.72\n\n\n\n\n\n\n\n\n\nCode\ndef abc_xyz_plot(var: str, y_title: str, title: str):\n    return (\n        g.ggplot(data=temp, mapping=g.aes(x=\"abc_xyz_class\", y=var)) +\n        g.geom_col() +\n        g.labs(x=\"Class\", y=y_title, title=title) +\n        g.scale_y_continuous(labels=lambda l: [\"{:,.0f}\".format(v) for v in l]) +\n        custom_theme()\n    )\n\n\n\nabc_xyz_plot(var=\"total_sku\", \n             y_title=\"No. Products\", \n             title=\"Number of Products by (ABC-XYZ) Class\")\n\n\n\n\n47.6% of all products fall under the CZ class, with this insight inventory managers need to develope a responsive or adaptive supply chain for these products that can instantly adjust to changes in demand, where inventory is oredered and received only when it is needed, which reduces carrying cost.\n\nabc_xyz_plot(var=\"total_demand\", \n             y_title=\"Demand\", \n             title=\"Total Quantity Demand by (ABC-XYZ) Class\")\n\n\n\n\nFor quantity demand, class AX holds the majority with 44% of all demand. Since only 7.86% of all product falls under the AX class, inventory managers can bring in more products from other class by reviewing price strategy, imporving marketing and promotion and also consider bundling or cross-selling with other high performing products such as products in class AX and AY.\n\nabc_xyz_plot(var=\"total_revenue\", \n             y_title=\"Revenue\", \n             title=\"Total Revenue by (ABC-XYZ) Class\")\n\n\n\n\nClass AX and AY both contains majority of products that generate the highest revenue, a combined 72% of revenue. Inventory managers should consider conducting market research on products generating less revenue to identify trends and customer preferences. This can help them identify new opputunities and adjust product features and marketing accordingly.\nIn summary ABC-XYZ analysis provides insight that inventory managers can utilize to optimize inventory business operations, by indentifying the most critical items and assigning appproprate inventory control policies, businesses can better manage their stock and ultimately improve customer satisfaction. Additionally, its can help inventory managers to identify opportunities for process improvement, enhance decision-making, and allocate resources effectively."
  },
  {
    "objectID": "posts/abc-xyz-analysis/index.html#abc-inventory-classification",
    "href": "posts/abc-xyz-analysis/index.html#abc-inventory-classification",
    "title": "ABC-XYZ Inventory Classification",
    "section": "ABC inventory classification",
    "text": "ABC inventory classification\nABC inventory classification helps business group items based on demand, cost, revenue and the overall relative importance of the item to the business. It helps them realize which of their products or services have the most significant impact on their financial success.\nIt categories items into three separate classes where:\n\nItems in class A are considared to have high demand volume and revenue, majorly 80% overall.\n\n\nItems in class B have slightly moderate demand volume and revenue, considared to be 15% of the overall total.\n\n\nItems in class C have reletively low demand volume and revenue.\n\nTo group each product, we will perform the following operations:\n\nGroup the transaction data by SKU and extract the number of times each product was purchased, the total demand for the product and the sum of all sales amount.\nThe resulting data from the previous step will be arranged from the highest revenue to the lowest revenue (e.i in descending order).\n\n\nabc_df = (\n    df_m\n        .groupby(\"sku\")\n        .agg(unique_purchases = (\"sku\", \"nunique\"),\n             total_demand = (\"quantity\", \"sum\"), \n             total_revenue = (\"sales_amount\", \"sum\"))\n        .sort_values(by=\"total_revenue\", ascending=False)\n        .reset_index()\n)\n\nabc_df.head()\n\n\n\n\n\n\n\n\nsku\nunique_purchases\ntotal_demand\ntotal_revenue\n\n\n\n\n0\n3YDVF\n1\n926.0\n29419.35\n\n\n1\nLJ26I\n1\n632.0\n13571.45\n\n\n2\nIRQZ4\n1\n321.0\n11681.63\n\n\n3\nDWJC4\n1\n823.0\n10592.09\n\n\n4\n44RUE\n1\n218.0\n8942.63\n\n\n\n\n\n\n\n\nGet the cumulative sum of total revenue which determine the relative contribution of each product to the total revenue generated from all products.\nProducts that belong to the A class are those that accounted for 80% of the revenue generated.\nClass B products are those that fall between the top 80% and the next 15% of revenue generated.\nWhile products in class C are those that fall withing the remaining 5% of revenue generated.\n\n\n\nCode\ndef classify_abc_item(cum_percent):\n    \"\"\"\n    Assign (ABC) classification to each product based on the their percentage of\n    revenue contribution. \n\n    :param cum_percent: The running percentage of revenue contributed.\n    :return: A pandas Series with three unique category.\n    \"\"\"\n\n    if cum_percent &lt;= 80:\n        return 'A'\n    elif cum_percent &gt; 80 and cum_percent &lt;= 95:\n        return 'B'\n    else:\n        return 'C'\n\n\n\nabc_df = abc_df.assign(\n    # running total of revenue.\n    revenue_cumsum = lambda d: d[\"total_revenue\"].cumsum(),\n    # the percentage of total revenue.\n    revenue_running_percent = lambda d: (d[\"revenue_cumsum\"] / d[\"total_revenue\"].sum()) * 100,\n    # aasign each product a class.\n    abc_class = lambda d: d[\"revenue_running_percent\"].apply(classify_abc_item),\n    # simple rank to each product based on the its percentage of revenue generated.\n    rank  = lambda d: d[\"revenue_running_percent\"].rank().astype(int)\n)\n\nabc_df.head()\n\n\n\n\n\n\n\n\nsku\nunique_purchases\ntotal_demand\ntotal_revenue\nrevenue_cumsum\nrevenue_running_percent\nabc_class\nrank\n\n\n\n\n0\n3YDVF\n1\n926.0\n29419.35\n29419.35\n1.866325\nA\n1\n\n\n1\nLJ26I\n1\n632.0\n13571.45\n42990.80\n2.727279\nA\n2\n\n\n2\nIRQZ4\n1\n321.0\n11681.63\n54672.43\n3.468347\nA\n3\n\n\n3\nDWJC4\n1\n823.0\n10592.09\n65264.52\n4.140295\nA\n4\n\n\n4\n44RUE\n1\n218.0\n8942.63\n74207.15\n4.707603\nA\n5\n\n\n\n\n\n\n\n\n\nSummary\n\ntemp = (\n    abc_df\n        .groupby(\"abc_class\")\n        .agg(total_products = ('sku', 'nunique'),\n             total_demand = ('total_demand', \"sum\"),\n             total_revenue = ('total_revenue', \"sum\"))\n        .reset_index()\n)\n\n\n\nCode\ndef abc_plot(var: str, y_title: str, title: str):\n    return (\n        g.ggplot(data=temp.assign(prop = lambda d: (d[var] / d[var].sum())*100), \n             mapping=g.aes(x=\"abc_class\", y=var)) +\n        g.geom_col() +\n        g.geom_text(g.aes(label=\"prop\", y=0), \n                    position=g.position_dodge(width=.9), \n                    nudge_x=-0.18,\n                    size=30, color=\"#4D4D4D\",\n                    va=\"bottom\",\n                    format_string=\"{:.1f}%\") +\n        g.scale_y_continuous(labels = lambda l: [\"{:,.0f}\".format(v) for v in l]) +\n        g.labs(x=\"Class\", y=y_title, title=title) +\n        custom_theme()\n    )\n\n\n\nNumber of Products\n\nabc_plot(var=\"total_products\", \n         y_title=\"No. Products\", \n         title=\"Number of Products in Each Class\")\n\n\n\n\nA large number of products, e.i about 51.4% fall within the class C boundary which have the lowest demand and revenue generated while 21.7% of all products falls within the top 80% generating the highest revenue.\n\n\nProduct Demand\n\nabc_plot(var=\"total_demand\", \n         y_title=\"Qty. Demand\", \n         title=\"Total Quantity Demand by (ABC) Class\")\n\n\n\n\nProduct classification summary by the quantity show how much of products in class A where in demand. There are no suprises here given that these products generate more revenue. For class C products, despite comprising of 51.4% of all products, they only have 9.9% of the total order quantity.\n\n\nRevenue\n\n(\n    g.ggplot(data=temp, mapping=g.aes(x=\"abc_class\", y=\"total_revenue\")) +\n    g.geom_col() +\n    g.scale_y_continuous(labels = lambda l: [\"{:,.0f}\".format(v) for v in l]) +\n    g.labs(x=\"Class\", y=\"Revenue\", title=\"Total Revenue by (ABC) Class\") +\n    custom_theme()\n)\n\n\n\n\nA visual representation of the 80/15/5 split of the total revenue generated and as expected all products generating more demand and revenue are in the class A category. It is important for inventory managers to create an optimize inventory level for such product to meet demand, they should also prioritize supplier relationship to ensure adequate access to such products, and lastly there should be a huge focus on quality as anything less than that can lead to decrease in demand and eventually low revenue."
  },
  {
    "objectID": "posts/abc-xyz-analysis/index.html#xyz-inventory-classification",
    "href": "posts/abc-xyz-analysis/index.html#xyz-inventory-classification",
    "title": "ABC-XYZ Inventory Classification",
    "section": "XYZ inventory classification",
    "text": "XYZ inventory classification\nThe major aspect of ABC analysis is it focus on valuable items based on their demand and revenue with less emphasis on other factors such as demand variability and sessionality. This gap can be bridged using the XYZ inventory classification which categorize products according to their level of demand variability.\nThere are three categories in XYZ analysis which are:\n\nClass X: These are items with low demand variability, they are less challenging to manage because of their predictable demand patterns.\n\n\nClass Y: Items in this class have a moderate demand variability, but they are not easy to manage unlike items in class X, but they have better predictable patterns than items in class Z.\n\n\nClass Z: There are high demand variability in items that falls within this category, and demand for product are less stable and predictable.\n\n\n(\n    g.ggplot(data=df_m.groupby(\"month\")[\"quantity\"].sum().reset_index(), \n             mapping=g.aes(x=\"factor(month)\", y=\"quantity\", group=1)) +\n    g.geom_line() +\n    g.scale_y_continuous(labels = lambda l: [\"{:,.0f}\".format(v) for v in l]) +\n    g.labs(x=\"Month\", y=\"Quantity\", title=\"Quantity Demand by Month\") +\n    custom_theme()\n)\n\n\n\n\nA rundown of the seasonality in the data indicate that the total customer order by month have huge variablility across the year with its lowest point in August while its peaked in December. It is crucial to note that there was a surge in order from March to May followed by an abrupt decline in order from June to August.\n\n(\n    g.ggplot(data=df_m.groupby(\"month\")[\"sales_amount\"].sum().reset_index(), \n             mapping=g.aes(x=\"factor(month)\", y=\"sales_amount\", group=1)) +\n    g.geom_line() +\n    g.scale_y_continuous(labels = lambda l: [\"{:,.0f}\".format(v) for v in l]) +\n    g.labs(x=\"Month\", y=\"Revenue\", title=\"Total Revenue in Each Month\") +\n    custom_theme() \n)\n\n\n\n\nAlthough there are similar seasonal pattern between the total quantity order and revenue, the upword trend in revenue appear to have began in January all the way through to May, before the expected drop in revenue similar to the quantity order.\nTo draw out the XYZ class, we must first reshape the data and make each row represent a single SKU and the 12 months spread across different columns with values of the total quantity demand for a particular SKU.\n\nxyz_df = (\n    df_m\n        .groupby([\"sku\", \"month\"])[\"quantity\"]\n        .sum()\n        .reset_index()\n        .pivot(index=\"sku\", columns=\"month\", values=\"quantity\")\n        .fillna(0)\n        .add_prefix(\"M\")\n        .reset_index()\n        .rename(index={\"month\": \"index\"})\n)\n\nxyz_df.columns.name = \"\"\n\nxyz_df.head()\n\n\n\n\n\n\n\n\nsku\nM1\nM2\nM3\nM4\nM5\nM6\nM7\nM8\nM9\nM10\nM11\nM12\n\n\n\n\n0\n00GVC\n1.0\n0.0\n0.0\n0.0\n0.0\n1.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n1\n00OK1\n0.0\n0.0\n1.0\n7.0\n2.0\n1.0\n2.0\n3.0\n0.0\n0.0\n0.0\n2.0\n\n\n2\n0121I\n1.0\n3.0\n4.0\n2.0\n1.0\n5.0\n3.0\n1.0\n2.0\n4.0\n3.0\n2.0\n\n\n3\n01IEO\n3.0\n3.0\n5.0\n8.0\n6.0\n3.0\n3.0\n3.0\n0.0\n3.0\n2.0\n4.0\n\n\n4\n01IQT\n0.0\n2.0\n0.0\n0.0\n0.0\n1.0\n1.0\n2.0\n0.0\n0.0\n0.0\n1.0\n\n\n\n\n\n\n\n\nxyz_df = xyz_df.assign(\n    # calculate the standard deviation of all months total demand.\n    std_demand   = lambda d: d[[c for c in xyz_df.columns if \"M\" in c]].std(axis=1),\n    # calculate the total demand across all months.\n    total_demand = lambda d: d[[c for c in xyz_df.columns if \"M\" in c]].sum(axis=1),\n    # calculate the average demand for each SKU.\n    avg_demand   = lambda d: d[\"total_demand\"] / 12,\n    # coefficient of variation for each SKU\n    cov_demand   = lambda d: d[\"std_demand\"] / d[\"avg_demand\"]\n)\n\nxyz_df.head()\n\n\n\n\n\n\n\n\nsku\nM1\nM2\nM3\nM4\nM5\nM6\nM7\nM8\nM9\nM10\nM11\nM12\nstd_demand\ntotal_demand\navg_demand\ncov_demand\n\n\n\n\n0\n00GVC\n1.0\n0.0\n0.0\n0.0\n0.0\n1.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.389249\n2.0\n0.166667\n2.335497\n\n\n1\n00OK1\n0.0\n0.0\n1.0\n7.0\n2.0\n1.0\n2.0\n3.0\n0.0\n0.0\n0.0\n2.0\n2.022600\n18.0\n1.500000\n1.348400\n\n\n2\n0121I\n1.0\n3.0\n4.0\n2.0\n1.0\n5.0\n3.0\n1.0\n2.0\n4.0\n3.0\n2.0\n1.311372\n31.0\n2.583333\n0.507628\n\n\n3\n01IEO\n3.0\n3.0\n5.0\n8.0\n6.0\n3.0\n3.0\n3.0\n0.0\n3.0\n2.0\n4.0\n2.020726\n43.0\n3.583333\n0.563924\n\n\n4\n01IQT\n0.0\n2.0\n0.0\n0.0\n0.0\n1.0\n1.0\n2.0\n0.0\n0.0\n0.0\n1.0\n0.792961\n7.0\n0.583333\n1.359363\n\n\n\n\n\n\n\nCoefficient of variation : or CV is a statistical measure that express the variability of a set of data as a percentage of its mean.\n\nFormula: CV = (standard deviation / mean)\n\nTo measure each SKU variability, its CV will be used to determine the level of variation. So values are closer to zero, it indicate a small amount of variability, while value further from zero indicate a high amount of variability.\n\n(\n    xyz_df[\"cov_demand\"]\n        .agg([\"min\", \"mean\", \"max\"])\n        .reset_index()\n        .rename(columns={\"index\": \"Stats\", \"cov_demand\": \"Coefficient of Variation\"})\n)\n\n\n\n\n\n\n\n\nStats\nCoefficient of Variation\n\n\n\n\n0\nmin\n0.095766\n\n\n1\nmean\n1.748931\n\n\n2\nmax\n3.464102\n\n\n\n\n\n\n\nThe average CV of 1.75 indicate that the level of variability in demand is high since it falls within the CV range of 1-2, also the Maximum CV of 3.46 indicate that there are lot of products with high demand variability.\n\n(\n    g.ggplot(data=xyz_df, mapping=g.aes(x=\"cov_demand\")) +\n    g.geom_histogram(color=\"#FFF\", bins = 20) +\n    g.ggtitle(\"Coefficient of Variation\") +\n    custom_theme()\n)\n\n\n\n\n\nXYZ classes\nWe will use the 0.5 / 1 / &gt;1 CV to group all product into XYZ classes. products with a CV less than 0.5 indicate low demand variability and better forecating, this category of products will be assgined the X class while product with CV that falls within 0.5 to 1 indicate a moderate demand variability and will make up the Y class. Products with CV greater than 1 are much harder to predict and are subject to high fluctuations throughout the year and they will be categorised as Z class.\n\n\nCode\ndef classify_xyz_item(cov): \n    \"\"\"\n    Assign (XYZ) categories to each SKU based on their coefficient of \n    variation (CV) in order quantity.\n\n    :param cov: Coefficient of variation in order quantity for SKU\n    :return:  A pandas Series with three unique category.\n    \"\"\"\n\n    if cov &lt;= 0.5:\n        return 'X'\n    elif cov &gt; 0.5 and cov &lt;= 1.0:\n        return 'Y'\n    else:\n        return 'Z'\n\n\n\nxyz_df = xyz_df.assign(xyz_class = xyz_df[\"cov_demand\"].apply(classify_xyz_item))\n\n(\n    xyz_df[\"xyz_class\"]\n        .value_counts()\n        .reset_index()\n        .rename(columns={\"index\": \"Class\", \"xyz_class\": \"count\"})\n)\n\n\n\n\n\n\n\n\nClass\ncount\n\n\n\n\n0\nZ\n3429\n\n\n1\nY\n1281\n\n\n2\nX\n531\n\n\n\n\n\n\n\nBased on the number of product in each class, there are more products in the Z class than other classes, this is expected given the CV distribution earlier.\n\n(\n    xyz_df\n        .groupby(\"xyz_class\")\n        .agg(total_product = (\"sku\", \"nunique\"),\n             total_demand = (\"total_demand\", \"sum\"),\n             std_of_demand = (\"std_demand\", \"mean\"),\n             average_demand = (\"avg_demand\", \"mean\"),\n             average_cov = (\"cov_demand\", \"mean\"))\n        .reset_index()\n)\n\n\n\n\n\n\n\n\nxyz_class\ntotal_product\ntotal_demand\nstd_of_demand\naverage_demand\naverage_cov\n\n\n\n\n0\nX\n531\n99436.733\n4.981240\n15.605263\n0.369697\n\n\n1\nY\n1281\n65623.300\n3.037538\n4.269015\n0.736462\n\n\n2\nZ\n3429\n30348.396\n1.210885\n0.737542\n2.340750\n\n\n\n\n\n\n\n\nmonth_cols = [c for c in xyz_df.columns if \"M\" in c]\n\ntemp = (\n    xyz_df\n        .groupby(\"xyz_class\")[month_cols]\n        .sum()\n        .unstack(level=\"xyz_class\")\n        .reset_index()\n        .rename(columns={0: \"total_demand\", \"\": \"month\"})\n        .assign(month=lambda d: d[\"month\"].astype(\"category\").cat.reorder_categories(month_cols, ordered=True))\n)\n\ntemp.head()\n\n\n\n\n\n\n\n\nmonth\nxyz_class\ntotal_demand\n\n\n\n\n0\nM1\nX\n7955.50\n\n\n1\nM1\nY\n4737.00\n\n\n2\nM1\nZ\n2181.87\n\n\n3\nM2\nX\n7851.49\n\n\n4\nM2\nY\n4794.34\n\n\n\n\n\n\n\n\n(\n    g.ggplot(data=temp, mapping=g.aes(x=\"month\", y=\"total_demand\", group=1)) +\n    g.geom_line() +\n    g.scale_y_continuous(labels= lambda l: [\"{:,.0f}\".format(v) for v in l]) +\n    g.facet_wrap(facets=\"xyz_class\", nrow=3, scales=\"free_y\") +\n    g.labs(x=None, y=\"Demand\", title=\"(XYZ) Class by Total Quantity Order in each Month\") +\n    custom_theme(figure_size=(10, 6))\n)\n\n\n\n\nExamining each category represented on the graph, class X have the least amount of flutuations compared to class Y and class Z, class Z represent a clear case of high volatility on quantity demand across all months."
  }
]