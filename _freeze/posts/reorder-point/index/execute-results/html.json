{
  "hash": "849024fcabd95a5fe3362ce38382aeff",
  "result": {
    "markdown": "---\ntitle: Product Reorder Point Calculation In Python\nauthor: Ayomide Akinwande\ndate: '2023-06-29'\ncategories:\n  - code\n  - inventory analysis\n  - python\n---\n\nNumerous businesses have experienced the predicament of being unable to fulfill customer demand due to inadequate order quantities and incorrect estimations of the required ordering intervals. As a result, they have experienced a loss in sales. This highlights the critical importance of accurately calculating the reorder point for achieving business success. Hence, it becomes essential to define the reorder point.\n\nA reorder point is a predetermined inventory level at which a new order is placed to replenish stock before it runs out completely. By accurately determining the reorder point, businesses can ensure uninterrupted product availability, minimize the risk of stockouts, and prevent loss of sales. Using python, we will perform the computation of the reorder point for a retail company. \n\n### Load the Libraries\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport plotnine as g\n```\n:::\n\n\nThe dataset we will be working with consists of two separate tables. one table inclueds all past customer orders, while the other table contains information about the available stock quantities for each product SKU.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\npast_orders = pd.read_csv(\"data/past_order.csv\")\n\nstock = pd.read_csv(\"data/stock.csv\")\n```\n:::\n\n\nA quick inspection of the data ...\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\npast_orders.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Order Date</th>\n      <th>SKU ID</th>\n      <th>Order Quantity</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2019-11-19T00:00:00Z</td>\n      <td>3084CA</td>\n      <td>1.00</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2019-06-30T00:00:00Z</td>\n      <td>2621AA</td>\n      <td>20.00</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2020-04-19T00:00:00Z</td>\n      <td>1193BA</td>\n      <td>147.00</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2020-05-21T00:00:00Z</td>\n      <td>1971AA</td>\n      <td>10.00</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2019-03-31T00:00:00Z</td>\n      <td>3177CA</td>\n      <td>56.25</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nstock.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>SKU ID</th>\n      <th>Current Stock Quantity</th>\n      <th>Units (Nos/Kg)</th>\n      <th>Average Lead Time (days)</th>\n      <th>Maximum Lead Time (days)</th>\n      <th>Unit Price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1009AA</td>\n      <td>7210.0</td>\n      <td>Kg</td>\n      <td>30</td>\n      <td>48</td>\n      <td>28.76326</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1077CA</td>\n      <td>46516.0</td>\n      <td>Kg</td>\n      <td>45</td>\n      <td>70</td>\n      <td>22.97770</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1083AA</td>\n      <td>48210.0</td>\n      <td>Kg</td>\n      <td>45</td>\n      <td>68</td>\n      <td>29.02000</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1116CA</td>\n      <td>33398.0</td>\n      <td>Kg</td>\n      <td>90</td>\n      <td>140</td>\n      <td>32.80000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1126CA</td>\n      <td>39270.0</td>\n      <td>Kg</td>\n      <td>45</td>\n      <td>62</td>\n      <td>32.80000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n<br>\n\nTo facilitate data utilization, we will conduct a brief data cleaning process.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\npast_orders.columns = [\"date\", \"sku\", \"order_quantity\"]                # <1>          \n\npast_orders[\"date\"] = pd.to_datetime(past_orders[\"date\"])              # <2>\n\npast_orders = past_orders.sort_values(by=\"date\", ascending=True)       # <3>\n\n\nstock.columns = [                                                      # <4>\n    \"sku\", \"current_stock_qty\", \"unit_nos_kg\", \"avg_lead_time_days\",   # <4>\n    \"max_lead_time_days\", \"unit_price\"                                 # <4>\n]                                                                      # <4>\n```\n:::\n\n\n1. Update the column names of the past order dataset.\n2. Convert the data column from an object data type to the date format.\n3. Arrange the past order table in descending order, sorting from the farthest date to the most recent date.\n4. Update the column names of the stock dataset.\n\n<br>\n\nIn order to accurately determine the appropriate reorder points for each product, it is crucial to ascertain the total number of SKUs that will be considered in the analysis.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\npast_orders[\"sku\"].nunique()\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n290\n```\n:::\n:::\n\n\nThere are a total of 290 unique SKUs. By \"SKU\", which stands for \"Stock Keeping Unit\" we refer to a distinct indentifer assigned to a specific product or item variant.\n\n<br>\n\n## Extrating important dates periods\n\n::: {.cell code-annotations='below' execution_count=7}\n``` {.python .cell-code}\npast_orders = past_orders.assign(\n    week = past_orders[\"date\"].dt.isocalendar().week,  # <1>\n    year = past_orders[\"date\"].dt.year                 # <2>\n)\n```\n:::\n\n\n1. The week number within a year.\n2. The order year.\n\n<br>\n\n## Weekly Demand\n\nWe will examine the average and cummulative values of the weekly demand for all SKUs. This exploration will provide insights into both the typical demand level and the overall magnitude of the weekly demand throughout the year 2019.\n\n::: {.cell code-annotations='below' execution_count=8}\n``` {.python .cell-code}\nall_sku_summary = (\n    past_orders\n        .groupby([\"year\", \"week\"])                          # <1>\n        .agg(\n            avg_demand   = (\"order_quantity\", \"mean\"),\n            total_demand = (\"order_quantity\", \"sum\")\n        )\n        .reset_index()\n)\n```\n:::\n\n\n1. The past order will be grouped based on the order year and order week number.\n\n::: {.cell execution_count=9}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"all_sku_summary_plot\"}\ndef all_sku_summary_plot(df: pd.DataFrame, var: str):\n    \n    plt_title = \"Average\" if var == \"avg_demand\" else \"Total\"\n\n    return (\n\n        g.ggplot(df.query(\"year == 2019\"), g.aes(x=\"week\", y=var)) +\n        g.geom_line(color=\"#4F2F4F\") +\n        g.labs(x=\"Weeks\", \n               y=\"Demand\", \n               title=f\"{plt_title} Weekly Demand for All SKUs in 2019\") +\n        g.scale_x_continuous(breaks=range(0,53,5)) +\n        g.scale_y_continuous(labels = lambda l: [\"{:,.0f}\".format(v) for v in l]) +\n        g.theme_minimal() +\n        g.theme(\n            figure_size=(10, 4),\n            plot_title=g.element_text(color=\"#555555\", ha=\"left\"),\n            axis_title=g.element_text(color=\"#666666\"),\n            plot_background=g.element_rect(fill=\"#FFFFFF\", color=\"#FFFFFF\")\n        )\n\n    )\n```\n:::\n\n\n::: {.panel-tabset}\n\n## Average Demand\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nall_sku_summary_plot(all_sku_summary, \"avg_demand\")\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-11-output-1.png){}\n:::\n:::\n\n\n## Total Demand\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nall_sku_summary_plot(all_sku_summary, \"total_demand\")\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-12-output-1.png){}\n:::\n:::\n\n\n:::\n\nThe analysis of the average weekly demand reveals noticable spikes in demand during specific weeks such as the 18th, 22nd, and 29th weeks, where the demand exceeded 600 units. Additionally, after the 34th week, the demand consistently remained above 300 units, unlike the first 15 weeks.\n\nFor the total total weekly demand, we observe that demand was relatively lower for the initial 32 weeks. However, a significant surge occured from the 34th week untill the end of the year, with a demand increase of over 200,000 units. This indicate a higher volume of orders required towards the end of the year compared to the beginning.\n\n<br>\n\n## Lead Time\nBefore estimating the safety stock for each SKU, let's examine the average and maximum lead time required for product replenishment.\n\n::: {.cell execution_count=12}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"lead_time_plot\"}\ndef lead_time_plot(df: pd.DataFrame, var: str):\n\n    plt_title = \"Average\" if var == \"avg_lead_time_days\" else \"Maximum\"\n\n    return (\n\n        g.ggplot(df, g.aes(x=1, y=var)) +\n        g.geom_boxplot(color=\"#4F2F4F\", fill = \"#EEEEEE\") +\n        g.labs(x=None, \n               y=\"Lead Time (Days)\", \n               title=f\"Distribution of {plt_title} Lead Time\") +\n        g.theme_minimal() +\n        g.theme(\n            figure_size=(6, 4),\n            plot_title=g.element_text(color=\"#555555\", ha = \"left\"),\n            axis_title=g.element_text(color=\"#666666\"),\n            axis_text_x=g.element_blank(),\n            plot_background=g.element_rect(fill=\"#FFFFFF\", color=\"#FFFFFF\")\n        )\n        \n    )\n```\n:::\n\n\n::: {.panel-tabset}\n\n## Average Lead Time\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nlead_time_plot(stock, \"avg_lead_time_days\")\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-14-output-1.png){}\n:::\n:::\n\n\n## Maximum Lead Time\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nlead_time_plot(stock, \"max_lead_time_days\")\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-15-output-1.png){}\n:::\n:::\n\n\n:::\n\nWhen analyzing the average lead time for all SKUs, it is observed that 75% of the SKUs had lead times below 60 days. However, there are several other SKUs with an average lead time of 120 days and they are considered outliers.\n\nIn terms of the maximum lead time distribution, the majority (75%) of SKUs had lead time below 92 days. Nevertheless, there are some outliers with lead times exceeding 160 days. This indicate that the replenishment process can extend to durations of 160 days or even longer. Having such lengthy lead times posses significant challenges and difficulties.\n\n<br>\n\n## Average & Maximum demand for each SKU\n\n::: {.cell code-annotations='below' execution_count=15}\n``` {.python .cell-code}\ndemand = (\n    past_orders\n        .groupby([\"year\", \"week\", \"sku\"])\n        .agg(\n            total_demand = (\"order_quantity\", \"sum\")                   # <1>\n        )\n        .reset_index()\n        .groupby([\"sku\"])\n        .agg(\n            avg_demand = (\"total_demand\", \"mean\"),                     # <2>\n            max_demand = (\"total_demand\", \"max\")                       # <3>\n        )\n        .reset_index()\n)\n```\n:::\n\n\n1. The total demand per week for each SKUs.\n2. The average quantity demand.\n3. The maximum (peak) quantity demand.\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\ndemand.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>sku</th>\n      <th>avg_demand</th>\n      <th>max_demand</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1009AA</td>\n      <td>1252.144928</td>\n      <td>7004.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1077CA</td>\n      <td>6951.169231</td>\n      <td>34554.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1083AA</td>\n      <td>6552.644068</td>\n      <td>24126.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1116CA</td>\n      <td>8518.940000</td>\n      <td>36617.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1126CA</td>\n      <td>8158.431373</td>\n      <td>35072.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=17}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"sku_demand_plot\"}\ndef sku_demand_plot(df: pd.DataFrame, var: str):\n\n    plt_title = \"Average\" if var == \"avg_demand\" else \"Maximum\"\n\n    return (\n\n        g.ggplot(df, g.aes(x=var)) +\n        g.geom_histogram(bins=50, fill=\"#4F2F4F\") +\n        g.labs(x=\"Demand\", y=\"Count\", title=f\"{plt_title} Demand for all SKUs\") +\n        g.scale_x_continuous(labels = lambda l: [\"{:,.0f}\".format(v) for v in l]) +\n        g.theme_minimal() +\n        g.theme(\n            figure_size=(8, 4),\n            plot_title=g.element_text(color=\"#555555\", ha=\"left\"),\n            axis_title=g.element_text(color=\"#666666\"),\n            plot_background=g.element_rect(fill=\"#FFFFFF\", color=\"#FFFFFF\")\n        )\n\n    )\n```\n:::\n\n\n::: {.cell execution_count=18}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"sku_demand_table\"}\ndef sku_demand_table(df: pd.DataFrame, var: str):\n\n    return (\n    df[var]\n        .describe()\n        .reset_index()\n        .rename(columns={\"index\": \"stats\"})\n        .query(\"stats != 'count'\")\n        .style.format(formatter='{:,.2f}', subset=var, precision=1)\n)\n```\n:::\n\n\n::: {.panel-tabset}\n\n## Average Demand\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\nsku_demand_plot(demand, \"avg_demand\")\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-20-output-1.png){}\n:::\n:::\n\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\nsku_demand_table(demand, \"avg_demand\")\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```{=html}\n<style type=\"text/css\">\n</style>\n<table id=\"T_7cdca\">\n  <thead>\n    <tr>\n      <th class=\"blank level0\" >&nbsp;</th>\n      <th id=\"T_7cdca_level0_col0\" class=\"col_heading level0 col0\" >stats</th>\n      <th id=\"T_7cdca_level0_col1\" class=\"col_heading level0 col1\" >avg_demand</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th id=\"T_7cdca_level0_row0\" class=\"row_heading level0 row0\" >1</th>\n      <td id=\"T_7cdca_row0_col0\" class=\"data row0 col0\" >mean</td>\n      <td id=\"T_7cdca_row0_col1\" class=\"data row0 col1\" >1,137.46</td>\n    </tr>\n    <tr>\n      <th id=\"T_7cdca_level0_row1\" class=\"row_heading level0 row1\" >2</th>\n      <td id=\"T_7cdca_row1_col0\" class=\"data row1 col0\" >std</td>\n      <td id=\"T_7cdca_row1_col1\" class=\"data row1 col1\" >5,244.68</td>\n    </tr>\n    <tr>\n      <th id=\"T_7cdca_level0_row2\" class=\"row_heading level0 row2\" >3</th>\n      <td id=\"T_7cdca_row2_col0\" class=\"data row2 col0\" >min</td>\n      <td id=\"T_7cdca_row2_col1\" class=\"data row2 col1\" >1.11</td>\n    </tr>\n    <tr>\n      <th id=\"T_7cdca_level0_row3\" class=\"row_heading level0 row3\" >4</th>\n      <td id=\"T_7cdca_row3_col0\" class=\"data row3 col0\" >25%</td>\n      <td id=\"T_7cdca_row3_col1\" class=\"data row3 col1\" >10.68</td>\n    </tr>\n    <tr>\n      <th id=\"T_7cdca_level0_row4\" class=\"row_heading level0 row4\" >5</th>\n      <td id=\"T_7cdca_row4_col0\" class=\"data row4 col0\" >50%</td>\n      <td id=\"T_7cdca_row4_col1\" class=\"data row4 col1\" >22.86</td>\n    </tr>\n    <tr>\n      <th id=\"T_7cdca_level0_row5\" class=\"row_heading level0 row5\" >6</th>\n      <td id=\"T_7cdca_row5_col0\" class=\"data row5 col0\" >75%</td>\n      <td id=\"T_7cdca_row5_col1\" class=\"data row5 col1\" >249.00</td>\n    </tr>\n    <tr>\n      <th id=\"T_7cdca_level0_row6\" class=\"row_heading level0 row6\" >7</th>\n      <td id=\"T_7cdca_row6_col0\" class=\"data row6 col0\" >max</td>\n      <td id=\"T_7cdca_row6_col1\" class=\"data row6 col1\" >64,868.21</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n:::\n\n\n## Maximum Demand\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\nsku_demand_plot(demand, \"max_demand\")\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-22-output-1.png){}\n:::\n:::\n\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\nsku_demand_table(demand, \"max_demand\")\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```{=html}\n<style type=\"text/css\">\n</style>\n<table id=\"T_66e06\">\n  <thead>\n    <tr>\n      <th class=\"blank level0\" >&nbsp;</th>\n      <th id=\"T_66e06_level0_col0\" class=\"col_heading level0 col0\" >stats</th>\n      <th id=\"T_66e06_level0_col1\" class=\"col_heading level0 col1\" >max_demand</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th id=\"T_66e06_level0_row0\" class=\"row_heading level0 row0\" >1</th>\n      <td id=\"T_66e06_row0_col0\" class=\"data row0 col0\" >mean</td>\n      <td id=\"T_66e06_row0_col1\" class=\"data row0 col1\" >5,417.22</td>\n    </tr>\n    <tr>\n      <th id=\"T_66e06_level0_row1\" class=\"row_heading level0 row1\" >2</th>\n      <td id=\"T_66e06_row1_col0\" class=\"data row1 col0\" >std</td>\n      <td id=\"T_66e06_row1_col1\" class=\"data row1 col1\" >17,286.52</td>\n    </tr>\n    <tr>\n      <th id=\"T_66e06_level0_row2\" class=\"row_heading level0 row2\" >3</th>\n      <td id=\"T_66e06_row2_col0\" class=\"data row2 col0\" >min</td>\n      <td id=\"T_66e06_row2_col1\" class=\"data row2 col1\" >2.00</td>\n    </tr>\n    <tr>\n      <th id=\"T_66e06_level0_row3\" class=\"row_heading level0 row3\" >4</th>\n      <td id=\"T_66e06_row3_col0\" class=\"data row3 col0\" >25%</td>\n      <td id=\"T_66e06_row3_col1\" class=\"data row3 col1\" >47.17</td>\n    </tr>\n    <tr>\n      <th id=\"T_66e06_level0_row4\" class=\"row_heading level0 row4\" >5</th>\n      <td id=\"T_66e06_row4_col0\" class=\"data row4 col0\" >50%</td>\n      <td id=\"T_66e06_row4_col1\" class=\"data row4 col1\" >206.50</td>\n    </tr>\n    <tr>\n      <th id=\"T_66e06_level0_row5\" class=\"row_heading level0 row5\" >6</th>\n      <td id=\"T_66e06_row5_col0\" class=\"data row5 col0\" >75%</td>\n      <td id=\"T_66e06_row5_col1\" class=\"data row5 col1\" >1,706.50</td>\n    </tr>\n    <tr>\n      <th id=\"T_66e06_level0_row6\" class=\"row_heading level0 row6\" >7</th>\n      <td id=\"T_66e06_row6_col0\" class=\"data row6 col0\" >max</td>\n      <td id=\"T_66e06_row6_col1\" class=\"data row6 col1\" >136,634.40</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n:::\n\n\n:::\n\n<br>\n\n## Safety Stock\nSafety stock, also known as buffer stock, refers to the additional inventory held beyond the expected demand during the lead time. it acts as a cushion to account for uncertainties in demand, supply chain disruptions, or unexpected variations in lead time.\n\nThe formula for calculating safety stock using the maximum and average weekly demand is as follows:  \n\n>`Safety stock` = (max_unit_week **x** max_lead_time_replenish ) **—** (avg_weekly_demand **x** avg_lead_time_weeks)\n\n**Where:**  \n`max_unit_week` = Maximum number of units demand in a week.  \n`max_lead_time_replenish` = Maximum lead time for stock replenishment.  \n`avg_weekly_demand` = Average weekly usage.  \n`avg_lead_time_weeks` = Average lead time in a week. \n\n::: {.cell code-annotations='hover' execution_count=23}\n``` {.python .cell-code}\ninventory = (\n    demand\n        .merge(stock, how=\"left\", on=\"sku\")                                                        # <1>\n        .assign(\n            avg_lead_time_weeks = lambda _: _[\"avg_lead_time_days\"] / 7,                           # <2>\n            max_lead_time_weeks = lambda _: _[\"max_lead_time_days\"] / 7,                           # <3>\n            max_stock_depletion = lambda _: _[\"max_demand\"] * _[\"max_lead_time_weeks\"],            # <4>\n            avg_safety_stock = lambda _: _[\"avg_demand\"] * _[\"avg_lead_time_weeks\"],               # <5>\n            safety_stock  = lambda _: _[\"max_stock_depletion\"] - _[\"avg_safety_stock\"]   \n        )\n)\n```\n:::\n\n\n1. Join the demand table and stock table using the `sku` variable.\n2. The average weekly replenishment lead time.\n3. The maximum weekly replenishment lead time.\n4. Maximum stock depletion during lead time.\n5. Average safety stock for lead time.\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\ncol_list = [\n    \"sku\", \"current_stock_qty\", \"unit_price\", \n    \"max_demand\", \"avg_demand\",\n    \"avg_lead_time_weeks\", \"max_lead_time_weeks\",\n    \"max_stock_depletion\", \"avg_safety_stock\", \"safety_stock\"\n]\n\ninventory = inventory[col_list]\n\ninventory[[\n    \"sku\", \"max_stock_depletion\", \"avg_safety_stock\", \"safety_stock\"\n]].head()\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>sku</th>\n      <th>max_stock_depletion</th>\n      <th>avg_safety_stock</th>\n      <th>safety_stock</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1009AA</td>\n      <td>48027.428571</td>\n      <td>5366.335404</td>\n      <td>42661.093168</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1077CA</td>\n      <td>345540.000000</td>\n      <td>44686.087912</td>\n      <td>300853.912088</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1083AA</td>\n      <td>234366.857143</td>\n      <td>42124.140436</td>\n      <td>192242.716707</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1116CA</td>\n      <td>732340.000000</td>\n      <td>109529.228571</td>\n      <td>622810.771429</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1126CA</td>\n      <td>310637.714286</td>\n      <td>52447.058824</td>\n      <td>258190.655462</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n<br>\n\n::: {.cell execution_count=25}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"current_vs_safety table\"}\ncurrent_vs_safety = (\n    inventory[[\"current_stock_qty\", \"safety_stock\"]]\n        .assign(\n            fill_color = lambda _: np.where(\n                _[\"safety_stock\"] > 1000000, \"red\",\n                np.where(\n                     _[\"current_stock_qty\"] > 200000, \"red\", \"purple\"\n                )\n            )\n        )\n)\n```\n:::\n\n\n::: {.cell execution_count=26}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Relationship plot Code\"}\n(\n    g.ggplot(current_vs_safety, g.aes(x=\"current_stock_qty\", y=\"safety_stock\")) +\n    g.geom_point(g.aes(color = \"fill_color\"), show_legend=False) +\n    g.scale_y_continuous(labels = lambda l: [\"{:,.0f}\".format(v) for v in l])  +\n    g.scale_x_continuous(labels = lambda l: [\"{:,.0f}\".format(v) for v in l])  +\n    g.scale_color_manual(values = {\"red\": \"#CD0000\", \"purple\" : \"#4F2F4F\"}) +\n    g.labs(x=\"Stock Quantity (Kg)\", \n           y=\"Safety Stock\", \n           title=\"Relationship between Current Stock Qty. & Safety Stock\") +\n    g.theme_minimal() +\n    g.theme(\n        figure_size=(7, 4),\n         plot_title=g.element_text(color=\"#555555\", ha = \"left\", size=11),\n         axis_title=g.element_text(color=\"#666666\"),\n         plot_background=g.element_rect(fill=\"#FFFFFF\", color=\"#FFFFFF\")\n    )\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-27-output-1.png){}\n:::\n:::\n\n\nThe plot above reveals the expected positive relationship between the current stock quantity and safety stock. However, there are a few notable outliers in this relationship. Some SKUs exhibit a high current stock quantity of over 300,000 units but have a relatively lower safety stock level of less tha 500,000 units. Conversely, certain SKUs have a safety stock of over 1.5million Kg while having a lower current stock quantity of less than 100,000 Kgs\n\n<br>\n\n## Reorder Point\nReorder point is determined based on factors such as lead time, demand variability, and desired service level. It is calculated by considering the `average weekly demand`, `lead time`, and `safety stock`.  \nWhen the inventory level reached or falls below the reorder point, it triggers the placement of a new order to replenish the stock.     \nThe formula for calculating reorder point  is as follows:   \n\n> `Reorder point` = (avg_units_used **x** avg_week_lead_time) **+** safety_stock_units    \n\n**Where:**\n`avg_units_used` = Average demand of units weekly.    \n`avg_week_lead_time` = Average of week lead time.   \n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\ninventory = (\n    inventory\n        .assign(\n            qty_unit_sold   = (                                                              # <1>\n                inventory[\"avg_demand\"] * inventory[\"avg_lead_time_weeks\"]                   # <1>\n            ),                                                                               # <1>\n            reorder_point   = lambda _: _[\"safety_stock\"] + _[\"qty_unit_sold\"],              # <2>\n            need_to_reorder = lambda _: np.where(                                            # <3>\n                _[\"reorder_point\"] > _[\"current_stock_qty\"], \"Yes\", \"No\"                     # <3>\n            )                                                                                # <3>\n        )\n)\n```\n:::\n\n\n1. The total quantity of units that would be sold during the lead time.\n2. Product reorder point.\n3. Whether there is a need to replenish stock or not.\n\nThe `safety stock` here acts as buffer or cushion to account for uncertainties, variations in demand, and other factors that may affect the availability of stock during the lead time. In other words it ensures that there is enough stock on hand to avoid stockout and meet customer demand even in unexpected situations.\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\ninventory[[\n    \"sku\", \"safety_stock\", \"qty_unit_sold\", \n    \"reorder_point\", \"need_to_reorder\"\n]].head()\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>sku</th>\n      <th>safety_stock</th>\n      <th>qty_unit_sold</th>\n      <th>reorder_point</th>\n      <th>need_to_reorder</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1009AA</td>\n      <td>42661.093168</td>\n      <td>5366.335404</td>\n      <td>48027.428571</td>\n      <td>Yes</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1077CA</td>\n      <td>300853.912088</td>\n      <td>44686.087912</td>\n      <td>345540.000000</td>\n      <td>Yes</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1083AA</td>\n      <td>192242.716707</td>\n      <td>42124.140436</td>\n      <td>234366.857143</td>\n      <td>Yes</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1116CA</td>\n      <td>622810.771429</td>\n      <td>109529.228571</td>\n      <td>732340.000000</td>\n      <td>Yes</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1126CA</td>\n      <td>258190.655462</td>\n      <td>52447.058824</td>\n      <td>310637.714286</td>\n      <td>Yes</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n<br>\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\nneed_reorder = (\n    inventory[\"need_to_reorder\"]\n        .value_counts()\n        .reset_index()\n        .rename(columns= {\"index\": \"need_to_reorder\", \"need_to_reorder\": \"count\"})\n        .assign(\n            percentage = lambda _: round((_[\"count\"] / _[\"count\"].sum()) * 100, 2)\n        )\n)\n```\n:::\n\n\n::: {.cell execution_count=30}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Need to reorder plot code\"}\n(\n    g.ggplot(need_reorder, g.aes(x=\"need_to_reorder\", y=\"count\")) +\n    g.geom_col(fill=\"#4F2F4F\") +\n    g.geom_text(\n        g.aes(label=\"count\", y=4), \n        position=g.position_dodge(width=.9), \n        nudge_x=-0.25,\n        size=27, \n        color=\"#BA55D3\",\n        va=\"bottom\"\n    ) +\n    g.geom_text(\n        g.aes(label = \"percentage\", y=7), \n        position=g.position_dodge(width=.9), \n        nudge_x=0.27, \n        size=15, \n        va=\"bottom\",\n        color=\"#E066FF\",\n        format_string=\"{}%\"\n    ) +\n    g.labs(x=\"Reorder?\", y=None, title=\"Number of SKUs in each Category\") +\n    g.theme_minimal() +\n    g.theme(\n        figure_size=(7, 3),\n        plot_title=g.element_text(color=\"#555555\", ha = \"left\"),\n        axis_title_x=g.element_text(color=\"#666666\"),\n        axis_text_y=g.element_blank(),\n        plot_background=g.element_rect(fill=\"#FFFFFF\", color=\"#FFFFFF\")\n    )\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-31-output-1.png){}\n:::\n:::\n\n\nBased on the bar chart, it is evident that approximately 281 SKUs, which accounts for 96.9% of the total, require replenishment. Conversely, only 9 SKUs (3.1%) do not require replenishment. This indicate that majority of SKUs in the inventory, almost all except for a small minority, are in need of restocking.\n\n<br>\n\n## Stock Status\n\nTo ensure precise categorization of each SKU, it is necessary to extract the current stock status.\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\ninventory = (\n    inventory.\n        assign(\n            stock_status = lambda _: np.where(                                        # <1>                       \n                _[\"current_stock_qty\"] == 0, \"Out of Stock\", np.where(                # <2>\n                    _[\"need_to_reorder\"] == \"Yes\", \"Below Reorder Point\", \"In Stock\"  # <2>\n                )                                                                     # <2>\n            )\n        )\n)\n```\n:::\n\n\n1. Category of SKUs that a currently not available.\n2. Category of SKUs below the reorder point and SKUs currently in stock.\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\ninventory[\n    [\"sku\", \"safety_stock\", \"reorder_point\", \"need_to_reorder\", \"stock_status\"]\n].head()\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>sku</th>\n      <th>safety_stock</th>\n      <th>reorder_point</th>\n      <th>need_to_reorder</th>\n      <th>stock_status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1009AA</td>\n      <td>42661.093168</td>\n      <td>48027.428571</td>\n      <td>Yes</td>\n      <td>Below Reorder Point</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1077CA</td>\n      <td>300853.912088</td>\n      <td>345540.000000</td>\n      <td>Yes</td>\n      <td>Below Reorder Point</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1083AA</td>\n      <td>192242.716707</td>\n      <td>234366.857143</td>\n      <td>Yes</td>\n      <td>Below Reorder Point</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1116CA</td>\n      <td>622810.771429</td>\n      <td>732340.000000</td>\n      <td>Yes</td>\n      <td>Below Reorder Point</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1126CA</td>\n      <td>258190.655462</td>\n      <td>310637.714286</td>\n      <td>Yes</td>\n      <td>Below Reorder Point</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n<br>\n\n::: {.cell execution_count=33}\n``` {.python .cell-code}\nstock_status = (\n    inventory[\"stock_status\"]\n        .value_counts()\n        .reset_index()\n        .rename(columns= {\"index\": \"stock_status\", \"stock_status\": \"count\"})\n        .assign(\n            percentage = lambda _: round((_[\"count\"] / _[\"count\"].sum()) * 100, 2)\n        )\n)\n```\n:::\n\n\n::: {.cell execution_count=34}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Stock status plot code\"}\n(\n    g.ggplot(stock_status, g.aes(x=\"stock_status\", y=\"count\")) +\n    g.geom_col(fill=\"#4F2F4F\") +\n    g.geom_text(\n        g.aes(label=\"count\", y=4), \n        position=g.position_dodge(width=.9), \n        nudge_x=-0.25,\n        size=27, \n        color=\"#BA55D3\",\n        va=\"bottom\"\n    ) +\n    g.geom_text(\n        g.aes(label = \"percentage\", y=7), \n        position=g.position_dodge(width=.9), \n        nudge_x=0.25, \n        size=15, \n        va=\"bottom\",\n        color=\"#E066FF\",\n        format_string=\"{}%\"\n    ) +\n    g.labs(x=None, y=None, title = \"Number of SKUs by Stock Status\") +\n    g.theme_minimal() +\n    g.theme(\n        figure_size=(9, 4), \n        plot_title=g.element_text(color=\"#555555\", ha = \"left\"),\n        axis_title_x=g.element_text(color=\"#666666\"),\n        axis_text_y=g.element_blank(),\n        plot_background=g.element_rect(fill=\"#FFFFFF\", color=\"#FFFFFF\")\n    )\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-35-output-1.png){}\n:::\n:::\n\n\nThe analysis reveals that a significant majority of SKUs (approximately 96.55%) were currently below the reorder point, indicating a potential risk of stockouts. Only 3.1% of SKUs were found to be in stock and remarkably, only one SKU was out of stock.  \nThis finding highlights the need for imporvement in inventory management to ensure a higher percentage of SKUs are maintained above the reorder point and readily available for customers.\n\n<br>\n\n## Benefits Of Accurate Reorder Points\n1. It ensures optimal inventory level by replenishing stock at the right time.\n2. Improved customer satisfaction by ensuring that products are consistently available to meet customer demand.Therefore customer can rely on the business to fulfill orders promptly and consistently.\n3. Accurate reorder points can help businesses avoid excess inventory, thereby reducing storage costs, minimize the risk of obsolescence, and optimize their working capital.\n4. Efficient supply chain management can be achieved by streamlining the flow of goods, optimize procument processes, and maintain strong relationship with suppliers. This can imporve lead times and better coordination throughout the supply chain.\n5. It enhance business agility by enabling quick adjustments to inventory levels in response to changes in market demand, customer preferences, or unexpected events.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}